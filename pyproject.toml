[project]
name = "ember_mug"
readme = "README.md"
description = "Home Assistant Custom Integration for Ember Mugs."
authors = [
    { name = "Jesse Sopel", email = "jesse.sopel@gmail.com" },
]
license = { file = "LICENSE.md" }
requires-python = ">=3.11"
dynamic = ["version"]
classifiers=[
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]
dependencies = [
    "homeassistant>=2023.9.0",
    "bleak-retry-connector>=3.1.1",
    "bleak>=0.20.2",
    "python-ember-mug==0.9.0b5",
]

[project.optional-dependencies]
test = [
  "pytest>=7.2.1",
  "pytest-cov>=3.0.0",
  "pytest-asyncio>=0.20.2",
  "home-assistant-bluetooth",
  "pytest-homeassistant-custom-component",
  # Requirements for HASS
  "pyserial>=3.5",  # For HASS serial component
  "bluetooth-auto-recovery>=1.2.1",  # For HASS Bluetooth component
  "aiohttp-cors>=0.7.0", # For HASS http component
  "pyudev==0.23.2",  # For HASS usb component
]

[project.urls]
"Source code" = "https://github.com/sopelj/python-ember-mug/"
"Bug Tracker" = "https://github.com/sopelj/python-ember-mug/issues"
"Changelog" = "https://github.com/sopelj/python-ember-mug/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "custom_components/ember_mug/manifest.json"
pattern = "\"version\": \"(?P<version>[^\"]+)"

[tool.hatch.envs.default]
python = "3.12"

[tool.hatch.envs.test]
features = ["test"]

[[tool.hatch.envs.test.matrix]]
python = ["3.11"]
homeassistant = ["2023.9.3", "2023.10.5"]

[[tool.hatch.envs.test.matrix]]
python = ["3.11", "3.12"]
homeassistant = ["2023.11.1"]

[tool.hatch.envs.test.scripts]
cov = "pytest --asyncio-mode=auto --cov=custom_components --cov-branch --cov-report=xml --cov-report=term-missing tests"
no-cov = "cov --no-cov"

[tool.black]
line-length = 120
target-version = ['py311']

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "def __str__",
  "def main",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "if typing.TYPE_CHECKING:"
]

[tool.ruff]
fix = true
line-length = 120
target-version = "py311"
select = [
    "A",
    "ASYNC",
    "B",
    "COM",
    "C4",
    "D",
    "E",
    "ERA",
    "F",
    "FA",
    "FLY",
    "G",
    "I",
    "N",
    "PTH",
    "PT",
    "PL",
    "PLE",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SLF",
    "SIM",
    "TD",
    "TCH",
    "UP",
]
ignore = ["D203", "D212", "PLR2004", "PLR0913"]
extend-exclude = ["tests"]

[tool.mypy]
ignore_errors = true
ignore_missing_imports = false
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
